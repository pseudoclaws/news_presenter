require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PieceOfNewsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # AuthorizedNews. As you add validations to AuthorizedNews, be sure to
  # adjust the attributes here as well.
  let(:valid_yandex_attributes) {
    {
      title: Faker::Lorem.paragraph,
      description: Faker::Lorem.paragraph,
      link: 'https://news.yandex.ru/yandsearch?cl4url=www.gazeta.ru%2Farmy%2Fnews%2F10547774.shtml&from=rss',
      guid: '<guid>https://news.yandex.ru/yandsearch?cl4url=www.gazeta.ru%2Farmy%2Fnews%2F10547774.shtml&amp;from=rss</guid>'
    }
  }

  let(:valid_authorized_attributes) {
    {
      title: Faker::Lorem.paragraph,
      description: Faker::Lorem.paragraph,
      published_at: Time.now,
      valid_until: 1.day.since(Time.now)
    }
  }

  let(:invalid_yandex_attributes) {
    {
      title: nil,
      description: Faker::Lorem.paragraph,
      link: 'https://news.yandex.ru/yandsearch?cl4url=www.gazeta.ru%2Farmy%2Fnews%2F10547774.shtml&from=rss',
      guid: '<guid>https://news.yandex.ru/yandsearch?cl4url=www.gazeta.ru%2Farmy%2Fnews%2F10547774.shtml&amp;from=rss</guid>'
    }
  }

  let(:invalid_authorized_attributes) {
    {
      title: Faker::Lorem.paragraph,
      description: Faker::Lorem.paragraph,
      published_at: Time.now,
      valid_until: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AuthorizedNewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "returns a success response" do
      get :show
      expect(response).to be_success
    end
  end

  describe 'with authorized user' do
    let(:user) { FactoryGirl.create(:user) }
    before(:each) { sign_in user }

    describe "GET #new" do
      it "returns a success response" do
        get :new
        expect(response).to be_success
      end
    end

    describe "POST #create" do
      context "with valid params" do
        let(:user) { FactoryGirl.create(:user) }
        before(:each) { sign_in user }

        it "creates a new PieceOfNews" do
          expect {
            post :create, params: { piece_of_news: valid_authorized_attributes }
          }.to change(AuthorizedNews, :count).by(1)
        end
      end

      context "with invalid params" do
        it "returns a 422 response status" do
          post :create, params: { piece_of_news: invalid_authorized_attributes }
          expect(response.status).to eq 422
        end
      end
    end
  end
end
